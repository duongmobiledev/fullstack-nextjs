{
  "New Component": {
    "prefix": "~tsx",
    "body": [
      "",
      "interface I${1:Component} {  }",
      "",
      "const ${1:Component}: React.FC<I${1:Component}> = (props) => {",
      "",
      "  return (",
      "      <div className=\"\">",
      "          ",
      "      </div>",
      "  )",
      "}",
      "",
      "export default ${1:Component};"
    ],
    "description": "Create a new Component"
  },
  "Add Component": {
    "prefix": "~atsx",
    "body": [
      "const ${1:Component}: React.FC<{}> = (props) => {",
      "",
      "  return (",
      "      <div className=\"\">",
      "          ",
      "      </div>",
      "  )",
      "}",
      "",
    ],
    "description": "Create a new Component"
  }, 
  "New Page component": {
    "prefix": "~page",
    "body": [
      "import React, { useEffect } from \"react\";",
      "  import { useDispatch } from \"react-redux\";",
      "  import { setBreadcrumb } from \"redux/actions/_config\";",
      "",
      "  const ${1:Page}: React.FC = () => {",
      "    const dispatch = useDispatch();",
      "    useEffect(() => {",
      "      setupBreadcrumb();",
      "    });",
      "",
      "    const setupBreadcrumb = () => {",
      "      dispatch(",
      "        setBreadcrumb([",
      "          {",
      "            name: \"Th√¥ng tin chung\",",
      "          },",
      "          {",
      "            name: \" \",",
      "          },",
      "        ]),",
      "      );",
      "    };",
      "",
      "    return <div></div>;",
      "  };",
      "",
      "  export default ${1:Page};"

    ]
  },
  "Init Saga": {
    "prefix": "~initSaga",
    "body": [
      "import { all, takeLatest } from \"redux-saga/effects\";",
      "import * as types from \"redux/types/${1:servicePath}\";",
      "import {${4: nameFunctionSaga}} from \"\";",
      "",
      "export default function* ${2:nameSaga}() {",
      "    yield all([",
      "    takeLatest(types., ${4}),",
      "    ]);",
      "}"
    ]
  },
  "Create Saga": {
    "prefix": "~saga",
    "body": [
      "import { call, put } from \"redux-saga/effects\";",
      "import { IGraphQLResponse } from \"common/typings\";",
      "import { showNotification } from \"redux/actions/notification\";",
      "import { actionSuccess, setLoading } from \"redux/actions/common\";",
      "import {  } from \"redux/actions/\";",
      "import * as services from \"services/${1:servicePath}\";",
      "",
      "export function* ${2:getAllService}Saga (payload: any) {",
      "    const variables = payload.payload;",
      "",
      "    yield put(setLoading(true));",
      "    const response: IGraphQLResponse = yield call(",
      "        services.${2},",
      "        variables,",
      "    );",
      "    yield put(setLoading(false));",
      "",
      "    const { ${2}: result } = response?.data || {};",
      "    if (result) {",
      "        yield put(${2}Success(result));",
      "    }",
      "}",
      "",
    ]
  },
  "Add Saga": {
    "prefix": "~asaga",
    "body": [
      "",
      "export function* ${2:SagaFunctionName}(payload: any) {",
      "  const variables = payload.payload;",
      "  yield put(setLoading(true));",
      "  const response: IGraphQLResponse = yield call(",
      "    services.${3:serviceName},",
      "    variables,",
      "  );",
      "  yield put(setLoading(false));",
      "  const { ${3}: result } = response?.data || {};",
      "  if (result) {",
      "    yield put();",
      "  }",
      "}"
    ]
  },
  "Create Reducer": {
    "prefix": "~reducer",
    "body": [
      "import produce from \"immer\"",
      "import { AnyAction } from \"redux\";",
      "import * as types from \"redux/types/\"",
      "import {  } from \"common/typings\"",
      "",
      "interface ${1:Interface} {",
      "  ",
      "}",
      "",
      "const initialState: ${1:Interface} = {",
      "",
      "}",
      "",
      "const ${2:reducer} = (state = initialState, action: AnyAction) =>",
      "  produce(state, (draft) => {",
      "    switch (action.type) {",
      "      case types.${3:TYPE}:",
      "        draft. = action.payload.",
      "        break;",
      "      default:",
      "        break;",
      "      }",
      "  });",
      "",
      "export default ${2:reducer};"
    ]
  },
  "Create Action": {
    "prefix": "~action",
    "body": [
      "import * as types from \"redux/types/${1:pathName}\";",
      "import { ${4:Interface} } from \"common/typings\";",
      "",
      "export const ${2:actionName} = (payload: ${4:Interface}) => ({",
      "  type: types.${3:TYPE},",
      "  payload,",
      "});",
      "",
      "export const ${2:actionName}Success = <T>(payload: T) => ({",
      "  type: types.${3:TYPE}_SUCCESS,",
      "  payload,",
      "});",
      ""
    ]
  },
  "Add Action": {
    "prefix": "~aaction",
    "body": [
      "export const ${1:actionName} = (payload: ) => ({",
      "  type: types.${2:TYPE},",
      "  payload,",
      "});",
      "",
      "export const ${1:actionName}Success = <T>(payload: T) => ({",
      "  type: types.${2:TYPE}_SUCCESS,",
      "  payload,",
      "});",
      ""
    ]
  },
  "Create Services": {
    "prefix": "~services",
    "body": [
      "import { graphQLCommon } from \"common/utils/api\";",
      "import { gql } from \"apollo-boost\";",
      "import { ${3:Interface} } from \"common/typings\";",
      "",
      "const ${1:GET} = gql`",
      "   query() {",
      "       ${2:services}() {}",
      "  }",
      "`;",
      "",
      "export const ${2} = async (variables: ${3:Interface}) => {",
      "  const response = await graphQLCommon(${1}, variables);",
      "  return response;",
      "};",
      "",
      "const ${4:CREATE} = gql`",
      "   mutation () {",
      "       ${5:create}() {}",
      "  }",
      "`;",
      "",
      "export const ${5} = async (variables: ${3:Interface}) => {",
      "    const response = await graphQLCommon(${4}, variables);",
      "    return response;",
      "};"
    ]
  }
}
